{
	"version": "https://jsonfeed.org/version/1",
	"title": "Dean W. Andreakis",
	"icon": "https://micro.blog/deanandreakis/avatar.jpg",
	"home_page_url": "https://deanware.blog/",
	"feed_url": "https://deanware.blog/feed.json",
	"items": [
		
			{
				"id": "http://deanandreakis.micro.blog/2023/04/04/rust-language-a.html",
				"title": "Rust Language: A Safer Memory Model",
				"content_html": "<h2 id=\"introduction\">Introduction</h2>\n<p>I am currently learning Rust and one of the most important concepts to understand is the memory model. Rust&rsquo;s memory model addresses common pitfalls of other languages, such as null pointer dereferences, buffer overflows, and data races, without the need for a garbage collector. Let&rsquo;s take a closer look at Rust&rsquo;s memory model.</p>\n<h2 id=\"the-ownership-system-a-core-concept\">The Ownership System: A Core Concept</h2>\n<p>At the heart of Rust&rsquo;s memory model is its ownership system, which ensures that every piece of data has a single owner. This system enforces three key rules:</p>\n<ol>\n<li>Each value in Rust has one, and only one, owner.</li>\n<li>When the owner goes out of scope, the value is automatically dropped (deallocated).</li>\n<li>A value can either have a single mutable reference or multiple immutable references, but not both.\nBy adhering to these rules, Rust effectively prevents double-frees and use-after-free vulnerabilities, which often lead to security issues in other languages.</li>\n</ol>\n<h2 id=\"borrowing-and-lifetimes-safe-access-to-data\">Borrowing and Lifetimes: Safe Access to Data</h2>\n<p>Rust&rsquo;s borrowing mechanism allows data to be temporarily accessed through references without violating ownership rules. Borrowing comes in two flavors: mutable and immutable. Immutable borrows permit multiple references to read data simultaneously, while mutable borrows allow only one reference to modify the data. These restrictions prevent data races and ensure safe concurrent access to shared resources.</p>\n<p>Lifetimes, another key concept in Rust, further enhance safety by ensuring that borrowed references never outlive the data they refer to. A lifetime is a compile-time annotation that specifies the scope of a reference. Rust&rsquo;s borrow checker verifies that these lifetimes are valid, thus preventing dangling pointers and use-after-free errors.</p>\n<h2 id=\"memory-management-without-a-garbage-collector\">Memory Management without a Garbage Collector</h2>\n<p>Unlike languages like Java or Python, Rust does not rely on a garbage collector to manage memory. Instead, Rust&rsquo;s ownership system automatically deallocates memory when a value&rsquo;s owner goes out of scope. This deterministic memory management allows for predictable performance and fine-grained control over resource usage, which is especially beneficial for low-level systems programming and real-time applications.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Rust&rsquo;s memory model offers a unique combination of safety and performance. By leveraging ownership, borrowing, and lifetimes, we can write code that is both memory-safe and efficient, without the overhead of a garbage collector.</p>\n",
				"content_text": "## Introduction\n\nI am currently learning Rust and one of the most important concepts to understand is the memory model. Rust's memory model addresses common pitfalls of other languages, such as null pointer dereferences, buffer overflows, and data races, without the need for a garbage collector. Let's take a closer look at Rust's memory model.\n\n## The Ownership System: A Core Concept\n\nAt the heart of Rust's memory model is its ownership system, which ensures that every piece of data has a single owner. This system enforces three key rules:\n\n1. Each value in Rust has one, and only one, owner.\n2. When the owner goes out of scope, the value is automatically dropped (deallocated).\n3. A value can either have a single mutable reference or multiple immutable references, but not both.\nBy adhering to these rules, Rust effectively prevents double-frees and use-after-free vulnerabilities, which often lead to security issues in other languages.\n\n## Borrowing and Lifetimes: Safe Access to Data\n\nRust's borrowing mechanism allows data to be temporarily accessed through references without violating ownership rules. Borrowing comes in two flavors: mutable and immutable. Immutable borrows permit multiple references to read data simultaneously, while mutable borrows allow only one reference to modify the data. These restrictions prevent data races and ensure safe concurrent access to shared resources.\n\nLifetimes, another key concept in Rust, further enhance safety by ensuring that borrowed references never outlive the data they refer to. A lifetime is a compile-time annotation that specifies the scope of a reference. Rust's borrow checker verifies that these lifetimes are valid, thus preventing dangling pointers and use-after-free errors.\n\n## Memory Management without a Garbage Collector\n\nUnlike languages like Java or Python, Rust does not rely on a garbage collector to manage memory. Instead, Rust's ownership system automatically deallocates memory when a value's owner goes out of scope. This deterministic memory management allows for predictable performance and fine-grained control over resource usage, which is especially beneficial for low-level systems programming and real-time applications.\n\n## Conclusion\n\nRust's memory model offers a unique combination of safety and performance. By leveraging ownership, borrowing, and lifetimes, we can write code that is both memory-safe and efficient, without the overhead of a garbage collector.\n",
				"date_published": "2023-04-04T14:23:21-07:00",
				"url": "https://deanware.blog/2023/04/04/rust-language-a.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/03/28/a-day-at.html",
				
				"content_html": "<p>A day at the races! We were lucky enough to go to the Arizona Nationals NHRA event on March 25, 2023.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
				"content_text": "A day at the races! We were lucky enough to go to the Arizona Nationals NHRA event on March 25, 2023.\n\n<img src=\"uploads/2023/301a8d650a.jpg\" width=\"450\" height=\"600\" alt=\"My family and I in the stands at the drag race in Arizona.\"><img src=\"uploads/2023/f50d4be6b8.png\" width=\"600\" height=\"451\" alt=\"Two very fast funny cars going down the track at the drag race in Arizona.\">\n",
				"date_published": "2023-03-28T11:06:32-07:00",
				"url": "https://deanware.blog/2023/03/28/a-day-at.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/03/17/introducing-typescript.html",
				"title": "Introducing Typescript 5.0",
				"content_html": "<p>I work on a very large retail website as part of my main job and TypeScript is an integral part of the technology stack. Keeping up with technology advancements is an engaging part of my position. In this blog post, I will explore some of the most interesting new features in TypeScript 5.0:</p>\n<ol>\n<li>\n<p>Static Index Signatures\nThis feature allows developers to define a specific set of keys for an object, making it easier to catch type errors early on. With this feature, TypeScript can detect when an object is being used in a way that doesn&rsquo;t match its expected type, preventing runtime errors.</p>\n</li>\n<li>\n<p>Custom JSX Factories\nThis feature allows developers to define their own custom JSX factory functions, which can be used to render components and other elements in a more flexible and customizable way.</p>\n</li>\n<li>\n<p>Template String Type Improvements\nOne of the most significant changes is the addition of support for multiline template string types, which allows developers to define multiline strings without having to escape newlines or use concatenation.</p>\n</li>\n<li>\n<p>Improved Type Inference\nTypeScript now supports partial type argument inference, which allows developers to omit some type arguments and let TypeScript infer them based on the context. This feature can help reduce boilerplate code and make it easier to work with complex types.</p>\n</li>\n<li>\n<p>Stricter Checks for Readonly Properties\nTypeScript can detect when an object&rsquo;s readonly properties are being modified and issue an error, preventing bugs and making it easier to reason about code.</p>\n</li>\n</ol>\n<p>Microsoft is doing a good job of advancing TypeScript in ways that continue to support more error free software development.</p>\n",
				"content_text": "I work on a very large retail website as part of my main job and TypeScript is an integral part of the technology stack. Keeping up with technology advancements is an engaging part of my position. In this blog post, I will explore some of the most interesting new features in TypeScript 5.0:\r\n\r\n1. Static Index Signatures\r\nThis feature allows developers to define a specific set of keys for an object, making it easier to catch type errors early on. With this feature, TypeScript can detect when an object is being used in a way that doesn't match its expected type, preventing runtime errors.\r\n\r\n2. Custom JSX Factories\r\nThis feature allows developers to define their own custom JSX factory functions, which can be used to render components and other elements in a more flexible and customizable way.\r\n\r\n3. Template String Type Improvements\r\nOne of the most significant changes is the addition of support for multiline template string types, which allows developers to define multiline strings without having to escape newlines or use concatenation. \r\n\r\n4.  Improved Type Inference\r\nTypeScript now supports partial type argument inference, which allows developers to omit some type arguments and let TypeScript infer them based on the context. This feature can help reduce boilerplate code and make it easier to work with complex types.\r\n\r\n5. Stricter Checks for Readonly Properties\r\nTypeScript can detect when an object's readonly properties are being modified and issue an error, preventing bugs and making it easier to reason about code.\r\n\r\nMicrosoft is doing a good job of advancing TypeScript in ways that continue to support more error free software development.\n",
				"date_published": "2023-03-17T08:45:28-07:00",
				"url": "https://deanware.blog/2023/03/17/introducing-typescript.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/03/15/suggested-read-the.html",
				
				"content_html": "<p>Suggested Read: <a href=\"https://www.nytimes.com/2023/03/08/opinion/noam-chomsky-chatgpt-ai.html\">The False Promise of ChatGPT</a> | by Dr. Noam Chomsky | Mar, 2023 | NY Times</p>\n",
				"content_text": "Suggested Read: [The False Promise of ChatGPT](https://www.nytimes.com/2023/03/08/opinion/noam-chomsky-chatgpt-ai.html) | by Dr. Noam Chomsky | Mar, 2023 | NY Times\n",
				"date_published": "2023-03-15T14:21:38-07:00",
				"url": "https://deanware.blog/2023/03/15/suggested-read-the.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/03/15/grover-enjoying-the.html",
				
				"content_html": "<p>📷 Grover enjoying the weather</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "📷 Grover enjoying the weather\n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/5709176a0e.jpg\" width=\"600\" height=\"450\" alt=\"\">\n",
				"date_published": "2023-03-15T13:37:32-07:00",
				"url": "https://deanware.blog/2023/03/15/grover-enjoying-the.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/02/10/tpc-phoenix-open.html",
				
				"content_html": "<p>📷 2023 TPC Phoenix Open</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
				"content_text": "📷 2023 TPC Phoenix Open\n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/af1e2a9854.jpg\" width=\"600\" height=\"450\" alt=\"\"><img src=\"https://cdn.uploads.micro.blog/77166/2023/83ac9cb18f.jpg\" width=\"450\" height=\"600\" alt=\"\">\n",
				"date_published": "2023-02-10T13:33:50-07:00",
				"url": "https://deanware.blog/2023/02/10/tpc-phoenix-open.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/01/30/attended-the-barrettjackson.html",
				
				"content_html": "<p>📷 Attended the <a href=\"https://www.barrett-jackson.com/Events/Event/Home/Scottsdale-2023/ab1e8b14-6a68-41aa-becb-8942d5d2b9fa\">Barrett-Jackson</a> car show and auction in Scottsdale AZ.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
				"content_text": "📷 Attended the [Barrett-Jackson](https://www.barrett-jackson.com/Events/Event/Home/Scottsdale-2023/ab1e8b14-6a68-41aa-becb-8942d5d2b9fa) car show and auction in Scottsdale AZ. \n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/9a4af32236.jpg\" width=\"450\" height=\"600\" alt=\"\"><img src=\"https://cdn.uploads.micro.blog/77166/2023/6a0e8b2920.jpg\" width=\"600\" height=\"450\" alt=\"\"><img src=\"https://cdn.uploads.micro.blog/77166/2023/8f68f0fadf.jpg\" width=\"450\" height=\"600\" alt=\"\">\n",
				"date_published": "2023-01-30T11:58:06-07:00",
				"url": "https://deanware.blog/2023/01/30/attended-the-barrettjackson.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/01/25/horseshoe-bend-during.html",
				
				"content_html": "<p>📷 <a href=\"https://en.wikipedia.org/wiki/Horseshoe_Bend_(Arizona)\">Horseshoe Bend</a> during snowfall</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "📷 [Horseshoe Bend](https://en.wikipedia.org/wiki/Horseshoe_Bend_(Arizona)) during snowfall\r\n\r\n\n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/fc2a9b2a62.jpg\" width=\"600\" height=\"450\" alt=\"\">\n",
				"date_published": "2023-01-25T13:53:55-07:00",
				"url": "https://deanware.blog/2023/01/25/horseshoe-bend-during.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/01/24/another-beautiful-sunset.html",
				
				"content_html": "<p>📷 Another beautiful sunset</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "📷 Another beautiful sunset\n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/2a425f70ed.jpg\" width=\"600\" height=\"353\" alt=\"\">\n",
				"date_published": "2023-01-24T09:48:31-07:00",
				"url": "https://deanware.blog/2023/01/24/another-beautiful-sunset.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/01/19/i-am-lucky.html",
				
				"content_html": "<p>I am lucky enough to live near an area that hosts hot air balloon rides. I wake up many mornings with this view out of my bedroom window:\n📷</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I am lucky enough to live near an area that hosts hot air balloon rides. I wake up many mornings with this view out of my bedroom window:\n📷\n\n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/96ad862885.jpg\" width=\"600\" height=\"493\" alt=\"\">\n",
				"date_published": "2023-01-19T10:12:22-07:00",
				"url": "https://deanware.blog/2023/01/19/i-am-lucky.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/01/18/placed-my-order.html",
				
				"content_html": "<p>Placed my order for a new M2 mac mini. I currently use a 2017 27&quot; iMac w/ a core i5 processor so this should be a major speed bump.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Placed my order for a new M2 mac mini. I currently use a 2017 27\" iMac w/ a core i5 processor so this should be a major speed bump.\n\n\n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/b8b95e6edd.png\" width=\"600\" height=\"197\" alt=\"\">\n",
				"date_published": "2023-01-18T12:22:24-07:00",
				"url": "https://deanware.blog/2023/01/18/placed-my-order.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2023/01/17/hanging-out-with.html",
				
				"content_html": "<p>Hanging out with Grover</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Hanging out with Grover \n\n<img src=\"https://cdn.uploads.micro.blog/77166/2023/9abb4dc680.jpg\" width=\"600\" height=\"600\" alt=\"\">\n",
				"date_published": "2023-01-17T10:54:38-07:00",
				"url": "https://deanware.blog/2023/01/17/hanging-out-with.html"
			},
			{
				"id": "http://deanandreakis.micro.blog/2022/08/01/backyard-sunset.html",
				
				"content_html": "<p>Backyard sunset</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Backyard sunset\n\n<img src=\"https://deanandreakis.micro.blog/uploads/2022/2ce617622d.jpg\" width=\"600\" height=\"600\" alt=\"\" />\n",
				"date_published": "2022-07-31T19:50:03-07:00",
				"url": "https://deanware.blog/2022/08/01/backyard-sunset.html"
			}
	]
}
